directive @from(
   "Config"
   configUrlBase: String
   configQueryStringAdditions: [String]
   "Rename a REST result property"
   prop: String
   "REST calls"
   get: String
   delete: String
   patch: String
   post: String
   put: String
   "Specify a path to the property in the JSON result to use as field value"
   root: String
) on OBJECT | FIELD_DEFINITION
type Query @from(configUrlBase: "https://derpibooru.org") {
   image(id: ID!): Image @from(get: "/:id.json")
   user(name: ID!): User @from(get: "/profiles/:name.json")
   search(
      query: String!
      sort: SortFieldInput = created_at
      order: SortOrderInput = desc
   ): SearchPage! @from(get: "/search?q=:query&sf=:sort&sd=:sort_order")
}

scalar CommaSpaceSeparatedString
scalar Date
scalar Extension
scalar Mime
scalar Sha512
scalar Url

enum UserRole {
   user
}

enum InteractionType {
   voted
   faved
}

enum InteractionValue {
   up
   down
}

enum SortFieldInput {
   created_at
   updated_at
   first_seen_at
   score
   wilson
   relevance
   width
   height
   comments
   tag_count
   random
}

enum SortOrderInput {
   asc
   desc
}

enum LinkState {
    verified
}

type Award {
    awarded_on: Date!
    id: ID!
    image_url: Url!
    label: String!
    title: String!
}

type Image {
   aspect_ratio: Float!
   comment_count: Int!
   created_at: Date!
   description: String
   downvotes: Int!
   faves: Int!
   file_name: String
   first_seen_at: Date
   height: Int!
   id: ID!
   image_url: Url @from(prop: "image")
   interactions: [Interaction!]!
   is_optimized: Boolean!
   is_rendered: Boolean!
   mime_type: Mime
   orig_sha512_has: Sha512
   original_format: Extension
   representations: Representations
   score: Int!
   sha512_hash: Sha512
   source_url: Url
   spoilered: Boolean
   tag_ids: [ID!]!
   tags: CommaSpaceSeparatedString
   updated_at: Date!
   uploader_id: Int
   uploader_name: String @from(prop: "uploader")
   uploader_info: User @from(get: "/profiles/:uploader.json")
   upvotes: Int!
   width: Int!
}

type Interaction {
   id: ID
   image_id: ID
   image_info: Image @from(get: "/:image_id.json")
   interaction_type: InteractionType
   user_id: ID
   user_info: User @from(get: "/profiles/:user_id.json")
   interaction_value: InteractionValue @from(prop: "value")
}

type Link {
    created_at: Date!
    state: LinkState!
    tag_id: ID!
    user_id: ID!
    user_info: User! @from(get: "/profiles/:user_id.json")
}

type Representations {
   thumb_tiny: Url!
   thumb_small: Url!
   thumb: Url!
   small: Url!
   medium: Url!
   large: Url!
   tall: Url!
   full: Url!
}

type SearchPage {
   search: [Image!]!
   total: Int!
   interactions: [Interaction!]!
}

type TagQuery {
    tag: Tag!
    aliases: [String!]!
    dnp_entries: [String]
    images: [Image!]!
    interactions: [Interaction!]!
}

type Tag {
    id: ID!
    name: String!
    slug: String!
    description: String!
    short_description: String!
    image_count: Int! @from(prop: "images")
    spoiler_image_url: Boolean
    aliased_to: String
    aliased_to_id: ID
    namespace: String
    name_in_namespace: String!
    implied_tags: [String!]!
    implied_tag_ids: [ID!]!
    category: String
}

type User {
   avatar_url: Url
   awards: [Award!]!
   comment_count: Int!
   created_at: Date!
   description: String
   id: ID
   links: [Link!]!
   name: String!
   post_count: Int!
   role: UserRole!
   slug: String!
   topic_count: Int!
   uploads_count: Int!
}
